package tw.core;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import tw.core.exception.OutOfGuessCountException;
import tw.core.generator.AnswerGenerator;
import tw.core.model.GuessResult;

import java.util.ArrayList;
import java.util.List;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.junit.jupiter.api.Assertions.fail;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class GameTest {

    private final Answer actualAnswer = Answer.createAnswer("1 2 3 4");
    private Game game;

    @BeforeEach
    public void setUp() throws Exception {
        AnswerGenerator answerGenerator = mock(AnswerGenerator.class);
        when(answerGenerator.generate()).thenReturn(actualAnswer);
        game = new Game(answerGenerator);
    }


    @Test
    public void should_get_the_4A0B_when_guess_input_is_correct() throws Exception {

        //given
//        excuteSuccessGuess();
        GuessResult guess = game.guess(Answer.createAnswer("1 2 3 4"));
        //when
        //then
        assertThat(guess.getResult(), is("4A0B"));

    }
//

    @Test
    public void should_get_FAIL_when_guess_input_is_over_max_count() throws Exception {

        //given
//        excuteSuccessGuess();
        //when
        try {
            GuessResult guess1 = game.guess(Answer.createAnswer("1 5 6 7"));
            GuessResult guess2 = game.guess(Answer.createAnswer("1 5 6 7"));
            GuessResult guess3 = game.guess(Answer.createAnswer("1 5 6 7"));
            GuessResult guess4 = game.guess(Answer.createAnswer("1 5 6 7"));
            GuessResult guess5 = game.guess(Answer.createAnswer("1 5 6 7"));
            GuessResult guess6 = game.guess(Answer.createAnswer("1 5 6 7"));
            GuessResult guess7 = game.guess(Answer.createAnswer("1 5 6 7"));
        }
        //then
        catch (OutOfGuessCountException e){
            System.out.print("Guess count cant over 6!");
        }

    }

    @Test
    public void should_get_histroy_when_guess_input_is_1567()throws Exception{
        List<GuessResult> guessResults = new ArrayList<>();
        GuessResult guess1 = game.guess(Answer.createAnswer("1 5 6 7"));
        GuessResult guess2 = game.guess(Answer.createAnswer("1 5 6 7"));
        guessResults.add(guess1);
        guessResults.add(guess2);
        assertThat(game.guessHistory(),is(guessResults));
    }

    @Test
    public void shoule_get_checkStatus_is_success_when_guess_use_CORRECT_RESULT_STANDAR() throws Exception{
        List<GuessResult> guessResults = new ArrayList<>();
        //GuessResult guess1 = game.guess(Answer.createAnswer("1 5 6 7"));
        GuessResult guess2 = game.guess(Answer.createAnswer("1 2 3 4"));
        //guessResults.add(guess1);
        guessResults.add(guess2);
        assertThat(game.checkStatus(),is("success"));
    }
}
